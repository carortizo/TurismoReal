
-- Generado por Oracle SQL Developer Data Modeler 20.2.0.167.1538
--   en:        2021-09-27 22:27:11 CLST
--   sitio:      Oracle Database 11g
--   tipo:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE arriendo (
    id_arriendo           VARCHAR2(255) NOT NULL,
    reservas_id_reservas  VARCHAR2(255) NOT NULL
);

CREATE UNIQUE INDEX arriendo__idx ON
    arriendo (
        reservas_id_reservas
    ASC );

ALTER TABLE arriendo ADD CONSTRAINT arriendo_pk PRIMARY KEY ( id_arriendo );

CREATE TABLE check_in (
    id_check_in           VARCHAR2(15) NOT NULL,
    nombre                VARCHAR2(75) NOT NULL,
    rut                   INTEGER NOT NULL,
    descripcion           VARCHAR2(255) NOT NULL,
    personal_id_personal  VARCHAR2(255) NOT NULL,
    arriendo_id_arriendo  VARCHAR2(255) NOT NULL
);

CREATE UNIQUE INDEX check_in__idx ON
    check_in (
        arriendo_id_arriendo
    ASC );

ALTER TABLE check_in ADD CONSTRAINT check_in_pk PRIMARY KEY ( id_check_in );

CREATE TABLE check_out (
    id_check_out          VARCHAR2(75) NOT NULL,
    nombre                VARCHAR2(75) NOT NULL,
    rut                   INTEGER NOT NULL,
    descripcion           VARCHAR2(255) NOT NULL,
    personal_id_personal  VARCHAR2(255) NOT NULL,
    arriendo_id_arriendo  VARCHAR2(255) NOT NULL
);

CREATE UNIQUE INDEX check_out__idx ON
    check_out (
        arriendo_id_arriendo
    ASC );

ALTER TABLE check_out ADD CONSTRAINT check_out_pk PRIMARY KEY ( id_check_out );

CREATE TABLE cliente (
    id_cliente  VARCHAR2(255) NOT NULL,
    rut         INTEGER NOT NULL,
    nombre      VARCHAR2(75) NOT NULL,
    apellidos   VARCHAR2(75) NOT NULL,
    telefono    INTEGER NOT NULL,
    correo      VARCHAR2(255) NOT NULL,
    contrase√±a  VARCHAR2(75) NOT NULL
);

ALTER TABLE cliente ADD CONSTRAINT cliente_pk PRIMARY KEY ( id_cliente );

CREATE TABLE departamento (
    id_depto                  VARCHAR2(255) NOT NULL,
    disponibilidad            CHAR(1) NOT NULL,
    metros_cuadrados          FLOAT(1) NOT NULL,
    direccion                 VARCHAR2(255) NOT NULL,
    descripcion               VARCHAR2(75) NOT NULL,
    precio                    INTEGER NOT NULL,
    imagen_departamento       BLOB NOT NULL,
    inventario_id_inventario  VARCHAR2(255) NOT NULL,
    zonas_id_zonas            VARCHAR2(255)
);

CREATE UNIQUE INDEX departamento__idx ON
    departamento (
        inventario_id_inventario
    ASC );

ALTER TABLE departamento ADD CONSTRAINT departamento_pk PRIMARY KEY ( id_depto );

CREATE TABLE estado_tour (
    id_std_tour   VARCHAR2(255) NOT NULL,
    descripcion   VARCHAR2(75) NOT NULL,
    tour_id_tour  VARCHAR2(255) NOT NULL
);

ALTER TABLE estado_tour ADD CONSTRAINT estado_tour_pk PRIMARY KEY ( id_std_tour );

CREATE TABLE inventario (
    id_inventario       VARCHAR2(255) NOT NULL,
    habitacion          VARCHAR2(30) NOT NULL,
    camas_individuales  CHAR(1) NOT NULL,
    incluido            VARCHAR2(50) NOT NULL,
    no_incluido         VARCHAR2(50)
);

ALTER TABLE inventario ADD CONSTRAINT inventario_pk PRIMARY KEY ( id_inventario );

CREATE TABLE metodo_pago (
    id_met_pago  VARCHAR2(255) NOT NULL,
    descripcion  VARCHAR2(75)
);

ALTER TABLE metodo_pago ADD CONSTRAINT metodo_pago_pk PRIMARY KEY ( id_met_pago );

CREATE TABLE multa (
    id_multa                 VARCHAR2(255) NOT NULL,
    valor                    INTEGER NOT NULL,
    descripcion              VARCHAR2(255) NOT NULL,
    reservas_id_reservas     VARCHAR2(255) NOT NULL,
    check_out_id_check_out   VARCHAR2(75) NOT NULL,
    metodo_pago_id_met_pago  VARCHAR2(255) NOT NULL
);

CREATE UNIQUE INDEX multa__idx ON
    multa (
        check_out_id_check_out
    ASC );

CREATE UNIQUE INDEX multa__idxv1 ON
    multa (
        metodo_pago_id_met_pago
    ASC );

CREATE UNIQUE INDEX multa__idxv2 ON
    multa (
        reservas_id_reservas
    ASC );

ALTER TABLE multa ADD CONSTRAINT multa_pk PRIMARY KEY ( id_multa );

CREATE TABLE personal (
    id_personal                VARCHAR2(255) NOT NULL,
    nombre                     VARCHAR2(75) NOT NULL,
    apellidos                  VARCHAR2(75) NOT NULL,
    rut                        INTEGER NOT NULL,
    tipo_personal_id_tipo_prs  VARCHAR2(255) NOT NULL
);

CREATE UNIQUE INDEX personal__idx ON
    personal (
        tipo_personal_id_tipo_prs
    ASC );

ALTER TABLE personal ADD CONSTRAINT personal_pk PRIMARY KEY ( id_personal );

CREATE TABLE registro_de_pago (
    id_reg_pago  VARCHAR2(255) NOT NULL,
    descripcion  VARCHAR2(75) NOT NULL,
    pago_total   INTEGER NOT NULL
);

ALTER TABLE registro_de_pago ADD CONSTRAINT registro_de_pago_pk PRIMARY KEY ( id_reg_pago );

CREATE TABLE reservas (
    id_reservas                   VARCHAR2(255) NOT NULL,
    agendado                      DATE NOT NULL,
    pago_reserva                  NUMBER(01, 7) NOT NULL,
    subtotal                      NUMBER(01, 7) NOT NULL,
    descripcion                   VARCHAR2(75),
    estado_reserva                CHAR(1) NOT NULL,
    cliente_id_cliente            VARCHAR2(255) NOT NULL,
    servicio_extra_id_servextra   VARCHAR2(255) NOT NULL,
    registro_de_pago_id_reg_pago  VARCHAR2(255) NOT NULL,
    metodo_pago_id_met_pago       VARCHAR2(255) NOT NULL,
    departamento_id_depto         VARCHAR2(255) NOT NULL
);

CREATE UNIQUE INDEX reservas__idx ON
    reservas (
        registro_de_pago_id_reg_pago
    ASC );

ALTER TABLE reservas ADD CONSTRAINT reservas_pk PRIMARY KEY ( id_reservas );

CREATE TABLE servicio_extra (
    id_servextra          VARCHAR2(255) NOT NULL,
    tour                  CHAR(1) NOT NULL,
    transporte            CHAR(1) NOT NULL,
    transporte_id_transp  VARCHAR2(255) NOT NULL,
    tour_id_tour          VARCHAR2(255) NOT NULL
);

CREATE UNIQUE INDEX servicio_extra__idx ON
    servicio_extra (
        tour_id_tour
    ASC );

CREATE UNIQUE INDEX servicio_extra__idxv1 ON
    servicio_extra (
        transporte_id_transp
    ASC );

ALTER TABLE servicio_extra ADD CONSTRAINT servicio_extra_pk PRIMARY KEY ( id_servextra );

CREATE TABLE std_transporte (
    id_std_transp         VARCHAR2(255) NOT NULL,
    descripcion           VARCHAR2(75),
    transporte_id_transp  VARCHAR2(255) NOT NULL
);

ALTER TABLE std_transporte ADD CONSTRAINT std_transporte_pk PRIMARY KEY ( id_std_transp );

CREATE TABLE tipo_personal (
    id_tipo_prs  VARCHAR2(255) NOT NULL,
    descripcion  VARCHAR2(75) NOT NULL
);

ALTER TABLE tipo_personal ADD CONSTRAINT tipo_personal_pk PRIMARY KEY ( id_tipo_prs );

CREATE TABLE tour (
    id_tour  VARCHAR2(255) NOT NULL,
    lugar    VARCHAR2(75) NOT NULL,
    fecha    DATE NOT NULL
);

ALTER TABLE tour ADD CONSTRAINT tour_pk PRIMARY KEY ( id_tour );

CREATE TABLE transporte (
    id_transp  VARCHAR2(255) NOT NULL,
    conductor  VARCHAR2(50) NOT NULL,
    horario    DATE NOT NULL,
    vehiculo   VARCHAR2(75) NOT NULL,
    direccion  VARCHAR2(75) NOT NULL
);

ALTER TABLE transporte ADD CONSTRAINT transporte_pk PRIMARY KEY ( id_transp );

CREATE TABLE zonas (
    id_zonas     VARCHAR2(255) NOT NULL,
    descripcion  VARCHAR2(255) NOT NULL
);

ALTER TABLE zonas ADD CONSTRAINT zonas_pk PRIMARY KEY ( id_zonas );

CREATE TABLE zonas_personal (
    zonas_id_zonas        VARCHAR2(255) NOT NULL,
    personal_id_personal  VARCHAR2(255) NOT NULL
);

ALTER TABLE zonas_personal ADD CONSTRAINT zonas_personal_pk PRIMARY KEY ( zonas_id_zonas,
                                                                          personal_id_personal );

ALTER TABLE arriendo
    ADD CONSTRAINT arriendo_reservas_fk FOREIGN KEY ( reservas_id_reservas )
        REFERENCES reservas ( id_reservas );

ALTER TABLE check_in
    ADD CONSTRAINT check_in_arriendo_fk FOREIGN KEY ( arriendo_id_arriendo )
        REFERENCES arriendo ( id_arriendo );

ALTER TABLE check_in
    ADD CONSTRAINT check_in_personal_fk FOREIGN KEY ( personal_id_personal )
        REFERENCES personal ( id_personal );

ALTER TABLE check_out
    ADD CONSTRAINT check_out_arriendo_fk FOREIGN KEY ( arriendo_id_arriendo )
        REFERENCES arriendo ( id_arriendo );

ALTER TABLE check_out
    ADD CONSTRAINT check_out_personal_fk FOREIGN KEY ( personal_id_personal )
        REFERENCES personal ( id_personal );

ALTER TABLE departamento
    ADD CONSTRAINT departamento_inventario_fk FOREIGN KEY ( inventario_id_inventario )
        REFERENCES inventario ( id_inventario );

ALTER TABLE departamento
    ADD CONSTRAINT departamento_zonas_fk FOREIGN KEY ( zonas_id_zonas )
        REFERENCES zonas ( id_zonas );

ALTER TABLE estado_tour
    ADD CONSTRAINT estado_tour_tour_fk FOREIGN KEY ( tour_id_tour )
        REFERENCES tour ( id_tour );

ALTER TABLE multa
    ADD CONSTRAINT multa_check_out_fk FOREIGN KEY ( check_out_id_check_out )
        REFERENCES check_out ( id_check_out );

ALTER TABLE multa
    ADD CONSTRAINT multa_metodo_pago_fk FOREIGN KEY ( metodo_pago_id_met_pago )
        REFERENCES metodo_pago ( id_met_pago );

ALTER TABLE multa
    ADD CONSTRAINT multa_reservas_fk FOREIGN KEY ( reservas_id_reservas )
        REFERENCES reservas ( id_reservas );

ALTER TABLE personal
    ADD CONSTRAINT personal_tipo_personal_fk FOREIGN KEY ( tipo_personal_id_tipo_prs )
        REFERENCES tipo_personal ( id_tipo_prs );

ALTER TABLE reservas
    ADD CONSTRAINT reservas_cliente_fk FOREIGN KEY ( cliente_id_cliente )
        REFERENCES cliente ( id_cliente );

ALTER TABLE reservas
    ADD CONSTRAINT reservas_departamento_fk FOREIGN KEY ( departamento_id_depto )
        REFERENCES departamento ( id_depto );

ALTER TABLE reservas
    ADD CONSTRAINT reservas_metodo_pago_fk FOREIGN KEY ( metodo_pago_id_met_pago )
        REFERENCES metodo_pago ( id_met_pago );

ALTER TABLE reservas
    ADD CONSTRAINT reservas_registro_de_pago_fk FOREIGN KEY ( registro_de_pago_id_reg_pago )
        REFERENCES registro_de_pago ( id_reg_pago );

ALTER TABLE reservas
    ADD CONSTRAINT reservas_servicio_extra_fk FOREIGN KEY ( servicio_extra_id_servextra )
        REFERENCES servicio_extra ( id_servextra );

ALTER TABLE servicio_extra
    ADD CONSTRAINT servicio_extra_tour_fk FOREIGN KEY ( tour_id_tour )
        REFERENCES tour ( id_tour );

ALTER TABLE servicio_extra
    ADD CONSTRAINT servicio_extra_transporte_fk FOREIGN KEY ( transporte_id_transp )
        REFERENCES transporte ( id_transp );

ALTER TABLE std_transporte
    ADD CONSTRAINT std_transporte_transporte_fk FOREIGN KEY ( transporte_id_transp )
        REFERENCES transporte ( id_transp );

ALTER TABLE zonas_personal
    ADD CONSTRAINT zonas_personal_personal_fk FOREIGN KEY ( personal_id_personal )
        REFERENCES personal ( id_personal );

ALTER TABLE zonas_personal
    ADD CONSTRAINT zonas_personal_zonas_fk FOREIGN KEY ( zonas_id_zonas )
        REFERENCES zonas ( id_zonas );

---------------------------------------------------------------------------------
create or replace NONEDITIONABLE PROCEDURE REGISTRAR_CLIENTE(c_ID  VARCHAR2,
                              c_rut       INTEGER,
                              c_nombre    VARCHAR2,
                              c_apellido  VARCHAR2,
                              c_telefono    INTEGER,
                              c_correo      VARCHAR2,
                              c_contrase√±a  VARCHAR2)
IS
BEGIN
  INSERT INTO cliente(id_cliente,rut,nombre,apellidos,telefono,correo,contrase√±a)
     VALUES (c_ID,c_rut,c_nombre,c_apellido,c_telefono, c_correo, c_contrase√±a);
END;

BEGIN
  REGISTRAR_CLIENTE('1',20134125, 'Ayleen','Rojas', 24445617,'Lazcanolover@hotmail.com','detenido123');
  REGISTRAR_CLIENTE('2',15874871, 'Carlos','Ortiz', 1454757,'loca123@hotmail.com','DonOmar');
  REGISTRAR_CLIENTE('3',20057972, 'Catalina','Acu√±a', 41651327,'Pollofrio@hotmail.com','papasfritas123');
  REGISTRAR_CLIENTE('4',9754122, 'Fabian','Perez', 14577487,'Peregil13@hotmail.com','pollo123');
  REGISTRAR_CLIENTE('5',1784171, 'Daniela','Alvarez', 13415231,'joji123@hotmail.com','Benito15');
END;

Select * from cliente;


create or replace NONEDITIONABLE PROCEDURE MODIFICAR_CLIENTE(c_ID in cliente.id_cliente%TYPE,
                              c_rut       INTEGER,
                              c_nombre    VARCHAR2,
                              c_apellido  VARCHAR2,
                              c_telefono    INTEGER,
                              c_correo      VARCHAR2,
                              c_contrase√±a  VARCHAR2)
IS
BEGIN
UPDATE Cliente
SET  
     Rut = c_rut,
     Nombre = c_nombre, 
     Apellidos = c_apellido,
     telefono = c_telefono,
     Correo = c_correo,
     contrase√±a = c_contrase√±a
WHERE  Id_cliente = c_Id;
END;



BEGIN
  MODIFICAR_CLIENTE('1',20134125, 'Ayleen','Rojas', 24445617,'Lazcanolover@hotmail.com','detenido123');
  MODIFICAR_CLIENTE('2',15874871, 'Carlos','Ortiz', 1454757,'Panchitix@hotmail.com','DonOmar');
  MODIFICAR_CLIENTE('3',20057972, 'Catalina','Acu√±a', 41651327,'Pollofrio@hotmail.com','papasfritas123');
  MODIFICAR_CLIENTE('4',9754122, 'Fabian','Perez', 14577487,'Sardina456@hotmail.com','pollo123');
  MODIFICAR_CLIENTE('5',1526731, 'Daniela','Rivas', 16237811,'Pokemona123@hotmail.com','Benito15');
END;

Select * from cliente;



create or replace NONEDITIONABLE PROCEDURE BORRAR_CLIENTE(c_ID in cliente.id_cliente%TYPE
                             )
AS 
BEGIN 
DELETE
FROM   CLIENTE
WHERE  Id_cliente = c_ID;
END;

BEGIN
    BORRAR_CLIENTE('1');
    BORRAR_CLIENTE('2');
    BORRAR_CLIENTE('3');
    BORRAR_CLIENTE('4');
    BORRAR_CLIENTE('5');
END;
Select * from cliente;



create or replace NONEDITIONABLE PROCEDURE Mostrar(c_id varchar2)
IS
  c_rut      number(38);
  c_nombre   VARCHAR(100);
  c_apellido VARCHAR(100);
  c_telefono number(38);
  c_correo   VARCHAR(100);
BEGIN
  for c in(Select rut,nombre,apellidos,telefono,correo into c_rut,c_nombre,c_apellido,c_telefono,c_correo from cliente where id_cliente=c_id)
  loop c_rut:=c.rut;
  c_nombre:=c.nombre;
  c_apellido:=c.apellidos;
  c_telefono:=c.telefono;
  c_correo:=c.correo;
  DBMS_OUTPUT.PUT_LINE(c_rut);
  DBMS_OUTPUT.PUT_LINE(c_nombre);
  DBMS_OUTPUT.PUT_LINE(c_apellido);
  DBMS_OUTPUT.PUT_LINE(c_telefono);
  DBMS_OUTPUT.PUT_LINE(c_correo);
  end loop;
END;

set serveroutput on
BEGIN
    MOSTRAR('1');
    MOSTRAR('2');
    MOSTRAR('3');
    MOSTRAR('4');
    MOSTRAR('5');
END;

SELECT * FROM CLIENTE